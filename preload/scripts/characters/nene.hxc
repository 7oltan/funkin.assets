import funkin.play.character.SparrowCharacter;
import funkin.play.PlayState;
import flixel.FlxG;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.group.FlxTypedSpriteGroup;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.modding.base.ScriptedFlxSprite;
import flixel.group.FlxTypedSpriteGroup;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.audio.visualize.ABotVis;

class AbotSpeaker extends FlxTypedSpriteGroup{
	var stereoBG:FlxSprite;
	var abotViz:ABotVis;
	var eyeWhites:FlxSprite;
	var pupil:FlxAtlasSprite;
	var abot:FlxAtlasSprite;
	
	var pupilState:Int = 0;

	var PUPIL_STATE_NORMAL = 0;
	var PUPIL_STATE_LEFT = 1;


	override public function new(){
		super(0,0);
		
		stereoBG = new FlxSprite(150, 30, Paths.image('characters/abot/stereoBG'));
		add(stereoBG);
		
		abotViz = new ABotVis();
		abotViz.setPosition(200,84);
		add(abotViz);

		eyeWhites = new FunkinSprite(40,250).makeSolidColor(160, 60);
		add(eyeWhites);
		
		pupil = new FlxAtlasSprite(-507, -492, Paths.animateAtlas("characters/abot/systemEyes", "shared"));
		add(pupil);

		abot = ScriptedFlxAtlasSprite.init('ABotAtlasSprite');
		add(abot);
	}

	override function update(elapsed){
		super.update(elapsed);
		
		if (pupil?.anim?.isPlaying)
		{
			switch (pupilState)
			{
				case PUPIL_STATE_NORMAL:
					if (pupil.anim.curFrame >= 17)
					{
						trace('Done moving pupils left');
						pupilState = PUPIL_STATE_LEFT;
						pupil.anim.pause();
					}
	
				case PUPIL_STATE_LEFT:
					if (pupil.anim.curFrame >= 30)
					{
						trace('Done moving pupils right');
						pupilState = PUPIL_STATE_NORMAL;
						pupil.anim.pause();
					}
			}
		}
	}

	public function setShaders(deShader){
		abot.shader = deShader;
		pupil.shader = deShader;
		eyeWhites.shader = deShader;
		stereoBG.shader = deShader;
		for(bar in abotViz.members)
			bar.shader = deShader;
	}

	public function syncWith(music){
		abotViz.snd = music;
		abotViz.initAnalyzer();
	}

	public function bump(){
		abot.playAnimation("");
		abot.anim.curFrame = 1; // we start on this frame, since from Flash the symbol has a non-bumpin frame on frame 0
	}

	public function moveEyesRight(){
		if (pupilState == PUPIL_STATE_NORMAL) return;
		pupil.playAnimation('');
		pupil.anim.curFrame = 17;
	}

	public function moveEyesLeft(){
		if (pupilState == PUPIL_STATE_LEFT) return;
		pupil.playAnimation('');
		pupil.anim.curFrame = 0;
	}
}

class NeneCharacter extends SparrowCharacter {
	var abot;
	
	/**
	 * At this amount of life, Nene will raise her knife.
	 */
	 var VULTURE_THRESHOLD = 0.25 * 2;

	 /**
	  * Nene is in her default state. 'danceLeft' or 'danceRight' may be playing right now,
	  * or maybe her 'combo' or 'drop' animations are active.
	  *
	  * Transitions:
	  * If player health <= VULTURE_THRESHOLD, transition to STATE_PRE_RAISE.
	  */
	 var STATE_DEFAULT = 0;
 
	 /**
	  * Nene has recognized the player is at low health,
	  * but has to wait for the appropriate point in the animation to move on.
	  *
	  * Transitions:
	  * If player health > VULTURE_THRESHOLD, transition back to STATE_DEFAULT without changing animation.
	  * If current animation is combo or drop, transition when animation completes.
	  * If current animation is danceLeft, wait until frame 14 to transition to STATE_RAISE.
	  * If current animation is danceRight, wait until danceLeft starts.
	  */
	 var STATE_PRE_RAISE = 1;
 
	 /**
	  * Nene is raising her knife.
	  * When moving to this state, immediately play the 'raiseKnife' animation.
	  *
	  * Transitions:
	  * Once 'raiseKnife' animation completes, transition to STATE_READY.
	  */
	 var STATE_RAISE = 2;
 
	 /**
	  * Nene is holding her knife ready to strike.
	  * During this state, hold the animation on the first frame, and play it at random intervals.
	  * This makes the blink look less periodic.
	  *
	  * Transitions:
	  * If the player runs out of health, move to the GameOverSubState. No transition needed.
	  * If player health > VULTURE_THRESHOLD, transition to STATE_LOWER.
	  */
	 var STATE_READY = 3;
 
	 /**
	  * Nene is raising her knife.
	  * When moving to this state, immediately play the 'lowerKnife' animation.
	  *
	  * Transitions:
	  * Once 'lowerKnife' animation completes, transition to STATE_DEFAULT.
	  */
	 var STATE_LOWER = 4;
 
	 /**
	  * Nene's animations are tracked in a simple state machine.
	  * Given the current state and an incoming event, the state changes.
	  */
	 var currentState:Int = STATE_DEFAULT;

	/**
	 * Nene blinks every X beats, with X being randomly generated each time.
	 * This keeps the animation from looking too periodic.
	 */
	 var MIN_BLINK_DELAY:Int = 3;
	 var MAX_BLINK_DELAY:Int = 7;
	 var blinkCountdown:Int = MIN_BLINK_DELAY;

	function new() {
		super('nene');
	}

	function onCreate(event:ScriptEvent) {
		super.onCreate(event);
		abot = ScriptedFlxSpriteGroup.init('AbotSpeaker');
		if(FlxG.sound.music != null)
			abot.scriptCall('syncWith',[FlxG.sound.music]);
	}

	override function update(elapsed){
		super.update(elapsed);
		
		if(abot != null){//i put all of this here and not in draw on purpose, it doesnt need that many checks me thinks
			abot.x = this.x - 100;
			abot.y = this.y + 216; // 764 - 740
			abot.alpha = this.alpha;
			abot.visible = this.visible;
			abot.cameras = this.cameras;
			abot.scriptCall('setShaders',[this.shader]);
			abot.update(elapsed);
		}

		
		if (shouldTransitionState())
			transitionState();
	}
	
	function shouldTransitionState():Bool {
		return PlayState.instance.currentStage.getBoyfriend().characterId != "pico-blazin";
	}

	
	var animationFinished:Bool = false;
	function onAnimationFinished(name:String) {
		super.onAnimationFinished(name);

		switch(currentState) {
			case STATE_RAISE:
				if (name == "raiseKnife") {
					animationFinished = true;
					transitionState();
				}
			case STATE_LOWER:
				if (name == "lowerKnife") {
					animationFinished = true;
					transitionState();
				}
			default:
				// Ignore.
		}
	}

	function onAnimationFrame(name:String, frameNumber:Int, frameIndex:Int) {
		super.onAnimationFrame(name, frameNumber, frameIndex);

		switch(currentState) {
			case STATE_PRE_RAISE:
				if (name == "danceLeft" && frameNumber == 13) {
					animationFinished = true;
					transitionState();
				}

			case STATE_LOWER:
				if (name == "lowerKnife"&& frameNumber >= 10) {
					animationFinished = true;
					transitionState();
				}
			default:
				// Ignore.
		}
	}	

	function transitionState() {
		switch (currentState) {
			case STATE_DEFAULT:
				if (PlayState.instance.health <= VULTURE_THRESHOLD) {
					// trace('NENE: Health is low, transitioning to STATE_PRE_RAISE');
					currentState = STATE_PRE_RAISE;
				} else {
					currentState = STATE_DEFAULT;
				}
			case STATE_PRE_RAISE:
				if (PlayState.instance.health > VULTURE_THRESHOLD) {
					// trace('NENE: Health went back up, transitioning to STATE_DEFAULT');
					currentState = STATE_DEFAULT;
				} else if (animationFinished) {
					// trace('NENE: Animation finished, transitioning to STATE_RAISE');
					currentState = STATE_RAISE;
					playAnimation('raiseKnife');
					animationFinished = false;
				}
			case STATE_RAISE:
				if (animationFinished) {
					// trace('NENE: Animation finished, transitioning to STATE_READY');
					currentState = STATE_READY;
					animationFinished = false;
				}
			case STATE_READY:
				if (PlayState.instance.health > VULTURE_THRESHOLD) {
					// trace('NENE: Health went back up, transitioning to STATE_LOWER');
					currentState = STATE_LOWER;
					playAnimation('lowerKnife');
				}
			case STATE_LOWER:
				if (animationFinished) {
					// trace('NENE: Animation finished, transitioning to STATE_DEFAULT');
					currentState = STATE_DEFAULT;
					animationFinished = false;
					hasDanced = false;
				}
			default:
				// trace('UKNOWN STATE ' + currentState);
				currentState = STATE_DEFAULT;
		}
	}
	
	function dance(forceRestart:Bool) {
		if (abot != null)
			abot.scriptCall('bump');
		
		// Then, perform the appropriate animation for the current state.
		switch(currentState) {
			case STATE_DEFAULT:
				if (hasDanced) {
					playAnimation('danceRight', forceRestart);
				} else {
					playAnimation('danceLeft', forceRestart);
				}
				hasDanced = !hasDanced;
			case STATE_PRE_RAISE:
				playAnimation('danceLeft', false);
				hasDanced = false;
			case STATE_READY:
				if (blinkCountdown == 0) {
					playAnimation('idleKnife', false);
					blinkCountdown = FlxG.random.int(MIN_BLINK_DELAY, MAX_BLINK_DELAY);
				} else {
					blinkCountdown--;
				}
			default:
				// In other states, don't interrupt the existing animation.
		}
	}
	
	public function onScriptEvent(event:ScriptEvent):Void {
		if (event.type == "SONG_START" && abot != null)
			abot.scriptCall('syncWith',[FlxG.sound.music]);
		super.onScriptEvent(event);
	}

	public override function onSongEvent(scriptEvent:SongEventScriptEvent)
	{
		super.onSongEvent(scriptEvent);
		if (scriptEvent.eventData.eventKind == "FocusCamera" && abot != null)
		{
			switch (Std.parseInt(scriptEvent.eventData.value.char)) {
				case 0:
					abot.scriptCall('moveEyesRight');
				case 1:
					abot.scriptCall('moveEyesLeft');
				default:
			}
		}

	}

	public function ogDraw(){//for nene-dark smh
		super.draw();
	}

	override function draw(){
		if(abot != null)
			abot.draw();

		super.draw();
	}
}